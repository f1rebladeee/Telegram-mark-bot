from telebot import TeleBot, types
import telebot
import qrcode
import calendar
from datetime import datetime
import psycopg2

# Variables
BASO_03_23_BD = psycopg2.connect(dbname='postgres', user='postgres', host='localhost', port='5432', password='1')
cursor = BASO_03_23_BD.cursor()
link = 'https://t.me/ConsyyyBot'
groups = []
BASO_03_23 = open('TextFiles/BASO-03-23.txt', 'r').readlines()
token = '6626509200:AAHbOZAM-dMXqEPhmJQcW_I1qaEJ4MF0orQ'
bot = TeleBot(token)
admin_id = 647011387
schedules = []
schedule_c = {
    '0': {
        '12:40': '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫‚öôÔ∏è',
        '14:20': '–§–∏–∑–∏–∫–∞‚öôÔ∏è'
    },
    '1': {
        '10:40': '–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è‚öôÔ∏è',
        '12:40': '–§–∏–∑-—Ä–∞‚öôÔ∏è',
        '14:20': '–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è‚öôÔ∏è',
        '16:20': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞‚öôÔ∏è'
    },
    '2': {
        '09:00': '–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—èüéì',
        '10:40': '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—åüéì',
        '12:40': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∫—É–ª—å—Ç—É—Ä–∞ —Ä–µ—á–∏üéì',
        '14:20': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑'
    },
    '3': {
        '10:40': '–û—Å–Ω–æ–≤—ã —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏üéì',
        '12:40': '–û—Å–Ω–æ–≤—ã —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏‚öôÔ∏è',
        '14:20': '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏‚öôÔ∏è'
    },
    '4': {
        '12:40': '–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—èüéì',
        '14:20': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑üéì',
        '16:20': '–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üéì'
    },
    '5': {
        '12:40': '–§–∏–∑–∏–∫–∞üéì',
        '14:20': '–§–∏–∑–∏–∫–∞üéì'
    },
}
schedule_n = {
    '0': {
        '12:40': '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫‚öôÔ∏è',
        '14:20': '–§–∏–∑–∏–∫–∞‚öôÔ∏è'
    },
    '1': {
        '10:40': '–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è‚öôÔ∏è',
        '12:40': '–§–∏–∑-—Ä–∞‚öôÔ∏è',
        '14:20': '–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è‚öôÔ∏è',
        '16:20': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞‚öôÔ∏è'
    },
    '2': {
        '09:00': '–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—èüéì',
        '10:40': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üéì',
        '12:40': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∫—É–ª—å—Ç—É—Ä–∞ —Ä–µ—á–∏‚öôÔ∏è',
        '14:20': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑‚öôÔ∏è'
    },
    '3': {
        '09:00': '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏üéì',
        '10:40': '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏üéì',
        '12:40': '–û—Å–Ω–æ–≤—ã —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏‚öôÔ∏è',
        '14:20': '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏‚öôÔ∏è'
    },
    '4': {
        '12:40': '–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—èüéì',
        '14:20': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑üéì',
        '16:20': '–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üéì'
    },
    '5': {
        '12:40': '–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏‚öôÔ∏è',
        '14:20': '–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏‚öôÔ∏è'
    },
}
schedules.append(schedule_c)
schedules.append(schedule_n)
list_header = ''
students = open('TextFiles/list.txt', 'r')
welcome_msg = open('TextFiles/welcome.txt', 'r').read()
lines = students.readlines()
current_datetime = datetime.now()
hours = current_datetime.hour
minutes = current_datetime.minute
current_weekday = calendar.weekday(current_datetime.year, current_datetime.month, current_datetime.day)
people = {}
names = []
admin_list = ''
password = '123'
user_name = ''
ru_weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
param = int(input())
if param == 1:
    hours = 12
    minutes = 50

# Keyboards
sign_in_keyboard = types.InlineKeyboardMarkup()
registration_btn = types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—èüë§", callback_data="registration")
sign_in_keyboard.add(registration_btn)

start_keyboard = types.InlineKeyboardMarkup()
s_btn = types.InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µüñãÔ∏è", callback_data="start_bot")
start_keyboard.add(s_btn)

admin_keyboard = types.InlineKeyboardMarkup()
ad_btn1 = types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞üî¢", callback_data="create_code")
ad_btn2 = types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫üìÉ", callback_data="show_list")
ad_btn3 = types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫‚è©", callback_data="clear_list")
admin_keyboard.add(ad_btn1)
admin_keyboard.add(ad_btn2)
admin_keyboard.add(ad_btn3)
admin_keyboard.add(s_btn)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
@bot.message_handler(commands=['start'])
def start(m: types.Message):
    global cursor, user_name
    n = ''
    if check_person(m.from_user.id):
        if check_weekday():
            if current_pair():
                cursor.execute(""" SELECT * FROM users WHERE tg_id = %s """, (m.from_user.id,))
                name = cursor.fetchall()
                for row in name:
                    n = row[1]
                if m.from_user.id != admin_id:
                    tmp = f'–ü—Ä–∏–≤–µ—Ç, <b>{n}</b>, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ!üßë‚Äçüéì'
                    bot.send_message(m.chat.id, tmp, reply_markup=start_keyboard, parse_mode='html')
                else:
                    bot.send_message(m.chat.id, '–î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üòé', reply_markup=admin_keyboard)
            else:
                bot.send_message(m.chat.id, '–°–µ–π—á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤, –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ãüïó')
        else:
            bot.send_message(m.chat.id, '–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç, –∫–∞–π—Ñ—É–π!üåü')
    else:
        bot.send_message(m.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—èüë§", reply_markup=sign_in_keyboard)


def register_user(m):
    global user_name, BASO_03_23_BD
    tmp = list(m.text.split())
    id = 0
    n = ''
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã —Ä–æ–≤–Ω–æ 2 —Å–ª–æ–≤–∞
    if len(tmp) != 2:
        msg = bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.‚ùå')
        bot.register_next_step_handler(msg, register_user)
    cursor.execute("SELECT * FROM users WHERE first_name = %s AND last_name = %s", (tmp[0], tmp[1]))
    name = cursor.fetchall()
    for row in name:
        n = row[1]
        id = row[3]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if id is not None:
        msg = bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.‚ùå')
        bot.register_next_step_handler(msg, register_user)
    if n is None:
        msg = bot.send_message(m.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.‚ùå')
        bot.register_next_step_handler(msg, register_user)
    else:
        update_query = "UPDATE users SET tg_id = %s WHERE first_name = %s AND last_name = %s"
        cursor.execute(update_query, (m.from_user.id, tmp[0], tmp[1]))
        BASO_03_23_BD.commit()
        msg = f'–ü—Ä–∏–≤–µ—Ç {tmp[0]} —Å–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ!üßë‚Äçüéì'
        bot.send_message(m.chat.id, msg, reply_markup=start_keyboard, parse_mode='html')


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global current_weekday, hours, minutes, admin_list, students, lines, people, names, list_header
    if call.message:
        # User commands
        if call.data == 'registration':
            msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–ò–º—è –§–∞–º–∏–ª–∏—è>')
            bot.register_next_step_handler(msg, register_user)
        if call.data == 'start_bot':
            if not current_pair():
                bot.send_message(call.message.chat.id, '–°–µ–π—á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤, –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.üïó')
            else:
                list_header = current_pair()
                t = f'–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b><i><u>{list_header}</u></i></b>. –í–≤–µ–¥–∏ –∫–æ–¥. –ï–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å, –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–≤ QR-–∫–æ–¥!üîë'
                msg = bot.send_message(call.message.chat.id, t, parse_mode='html')
                bot.register_next_step_handler(msg, check_password)
        # Administrator commands
        if call.data == 'create_code':
            msg = bot.send_message(call.message.chat.id, '–ó–∞–¥–∞–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.')
            bot.register_next_step_handler(msg, set_password)
        if call.data == 'show_list':
            global admin_list, names, students
            admin_list = f'{list_header}\n'
            lines = open('TextFiles/list.txt', 'r').readlines()
            for i in range(len(lines)):
                admin_list = admin_list + f'{i + 1}. {lines[i]}\n'
            try:
                bot.send_message(call.message.chat.id, admin_list)
            except telebot.apihelper.ApiTelegramException:
                bot.send_message(call.message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
        if call.data == 'clear_list':
            msg = bot.send_message(call.message.chat.id, '–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!‚úÖ')
            bot.register_next_step_handler(msg, clear_list)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
def set_password(m):
    global password
    password = m.text
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4
    )
    qr.add_data(str(password))
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_colour="white")
    img.save("qr.png")
    photo = open('qr.png', 'rb')
    bot.send_photo(m.chat.id, photo)
    bot.send_message(m.chat.id, f'–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–ø–µ—Ä—å <b>{password}</b>', parse_mode='html')


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
def check_password(m):
    global names
    if m.text == password:
        f = l = ''
        cursor.execute(""" SELECT * FROM users WHERE tg_id = %s """, (m.from_user.id,))
        name = cursor.fetchall()
        for row in name:
            f = row[1]
            l = row[2]
        people[str(m.from_user.id)] = f + ' ' + l
        names.append(f + ' ' + l)
        names.sort()
        open('TextFiles/list.txt', 'w').close()
        open('TextFiles/list.txt', 'w').writelines(names)
        bot.send_message(m.chat.id, '–í—Å—ë –≤–µ—Ä–Ω–æ, —Ç—ã –æ—Ç–º–µ—á–µ–Ω –Ω–∞ –ø–∞—Ä–µ!‚úÖ')
    else:
        msg = bot.send_message(m.chat.id, '–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.‚ùå')
        bot.register_next_step_handler(msg, check_password)


def check_person(tg_id):
    global cursor
    cursor.execute("SELECT tg_id FROM users WHERE tg_id = %s", (tg_id,))
    return cursor.fetchone() is not None


def check_weekday():
    global current_weekday
    return current_weekday != 6


def clear_list():
    global admin_list
    open('../TextFiles/BASO-03-23.txt', 'r').close()
    admin_list = ''


def check_name(s):
    a = []
    f, l = map(str, s.split())
    f = f[:1].upper() + f[1:]
    l = l[:1].upper() + l[1:]
    a.append(f)
    a.append(l)
    return a


def current_pair():
    global schedule_n, BASO_03_23_BD, cursor, current_weekday
    cursor.execute(""" SELECT * FROM schedule_odd WHERE  weekday = %s """, (ru_weekdays[current_weekday],))
    r = cursor.fetchall()
    for row in r:
        if int(row[3][3:]) + int(row[3][:2]) * 60 <= hours * 60 + minutes <= int(row[3][3:]) + int(
                row[3][:2]) * 60 + 90:
            if row[2] == 'l':
                p = row[1] + 'üéì'
                return p
            else:
                p = row[1] + '‚öôÔ∏è'
                return p
    return False


def main():
    bot.polling(none_stop=True)


if __name__ == "__main__":
    main()
